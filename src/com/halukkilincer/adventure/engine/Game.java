package com.halukkilincer.adventure.engine;

import com.halukkilincer.adventure.characters.*;
import com.halukkilincer.adventure.map.*;
import com.halukkilincer.adventure.ui.GameUI;
import com.halukkilincer.adventure.utils.GameLogger;
import com.halukkilincer.adventure.utils.GameSaveManager;
import com.halukkilincer.adventure.utils.Location;

import java.util.Scanner;

public class Game implements AutoCloseable {
	private AbstractCharacter player;
	private final Scanner scanner;
	private boolean isRunning;

	public Game() {
		this.scanner = new Scanner(System.in);
		this.isRunning = true;
	}

<<<<<<< HEAD
	public void selectChar() throws InterruptedException {

		System.out.println("Merhaba " + player.getName());
		System.out.print("Bir zamanlar Aetheria adlƒ± kadim topraklarda, d√∂rt kahraman, "
				+ "d√ºnyanƒ±n kaderini deƒüi≈ütirecek bir yolculuƒüa √ßƒ±kmaya ant i√ßmi≈üti.\r\n" +

				"\t Sava≈ü√ßƒ± (HP:1500 Def:750 Attack:3100)\n"
				+ "Demir zƒ±rhƒ± ve devasa baltasƒ±yla, d√º≈üman ordularƒ±nƒ± tek ba≈üƒ±na devirebilecek kadar kudretliydi.\n"
				+ "Onun g√ºc√º, sava≈ü meydanƒ±nda yankƒ±lanan √∂fkeli k√ºkreyi≈üinde saklƒ±ydƒ±.\n"
				+ "\t Suikast√ßƒ± (HP:1200 Def:450 Attack:4200)\n"
				+ "G√∂lgelerin ustasƒ±ydƒ±. Hƒ±zlƒ± ve sessiz hareketleriyle d√º≈ümanlarƒ±nƒ± farkƒ±na varmadan saf dƒ±≈üƒ± bƒ±rakƒ±rdƒ±.\n "
				+ "Dagger'larƒ±nƒ±n soƒüuk √ßeliƒüi, bir anlƒ±k teredd√ºt√º bile affetmezdi.\n"
				+ "\t B√ºy√ºc√º (HP:800 Def:250 Attack:5500)\n"
				+ "Kadim b√ºy√ºlerin sƒ±rlarƒ±nƒ± ke≈üfetmi≈üti. Ate≈ü fƒ±rtƒ±nalarƒ± yaratabilir, d√º≈ümanlarƒ±nƒ± dondurabilir ya da zamanƒ± yava≈ülatabilirdi.\n "
				+ "Onun g√ºc√º, bilgelik ve sezgiyle besleniyordu.\n" 
				+ "\t ≈ûifacƒ± (HP:1700 Def:850 Attack:2300)\n"
				+ "Kutsal ƒ±≈üƒ±ƒüƒ±n sava≈ü√ßƒ±sƒ±ydƒ±. Yaralƒ±larƒ± iyile≈ütirir, lanetleri bozar ve m√ºttefiklerini korurdu.\n "
				+ "Ona dokunan her varlƒ±k, i√ßindeki iyiliƒüin sƒ±caklƒ±ƒüƒ±nƒ± hissederdi.\r\n"
				+ "Bir g√ºn, Void Lord adlƒ± karanlƒ±k bir varlƒ±k Aetheria'yƒ± yok etmeye ant i√ßti. Kutsal Ebedi Kristal, "
				+ "onun k√∂t√ºl√ºƒü√ºn√º durdurabilecek tek g√º√ßt√º.\n "
				+ "D√∂rt kahraman, bu kadim kristali korumak ve Void Lord'u sonsuz karanlƒ±ƒüa m√ºh√ºrlemek i√ßin g√º√ßlerini birle≈ütirdi.\r\n"
				+ "Ancak onlarƒ±n zaferi sadece kƒ±lƒ±√ßlar ve b√ºy√ºlerle deƒüil, birliktelik ve sadakatle m√ºmk√ºn olacaktƒ±‚Ä¶\r\n"
				+ "≈ûimdi, senin hikayen nasƒ±l devam edecek? üöÄ\r\n");
		int tryTime = 5; // Maksimum deneme hakkƒ±

		while (tryTime > 0) {

			System.out.print("L√ºtfen karakter se√ßimi yapƒ±nƒ±z : ");
			String selectCharInput = scanner.nextLine();
			String eLCase = selectCharInput.toLowerCase();

			if (eLCase.equals("sava≈ü√ßƒ±") || eLCase.equals("suikast√ßƒ±") || eLCase.equals("b√ºy√ºc√º")
					|| eLCase.equals("≈üifacƒ±")) {
				player.setCharName(eLCase);

				System.out.println("Karakteriniz hazƒ±rlanƒ±yor...");
				Thread.sleep(3000);
				break;
			} else {

				tryTime--; 
				if (tryTime == 0) {
					System.out.println("√áok fazla yanlƒ±≈ü deneme yaptƒ±nƒ±z. Men√ºye y√∂nlendiriliyorsunuz..");
					break;
				} else {
					System.out.println("Hatalƒ± se√ßim yaptƒ±nƒ±z. Kalan deneme hakkƒ±nƒ±z: " + tryTime);
				}

			}

		}
		player.initializeCharacter();
		startGame();
=======
	public void start() throws InterruptedException {
		initializeGame();
		gameLoop();
>>>>>>> b4e5e80 (Refactor and reorganize game architecture)
	}

	private void initializeGame() throws InterruptedException {
		// Load saved game if exists
		if (GameSaveManager.saveExists()) {
			System.out.println("\nKaydedilmi≈ü oyun bulundu. Y√ºklemek ister misiniz? (E/H)");
			if (scanner.nextLine().equalsIgnoreCase("E")) {
				loadGame();
				return;
			}
		}

		// Create new game
		String playerName = GameUI.getPlayerName();
		String characterChoice = GameUI.showCharacterSelection();
		
<<<<<<< HEAD
		if (player.getCharName() == null || player.getCharName().isEmpty()) {
			System.out.println("Karakter adƒ± belirlenmedi! √ñnce karakter se√ßmelisiniz.");
			return;
=======
		switch (characterChoice.toLowerCase()) {
			case "s" -> player = new Warrior(playerName);
			case "a" -> player = new Assassin(playerName);
			case "b" -> player = new Mage(playerName);
			case "h" -> player = new Healer(playerName);
			case "q" -> {
				isRunning = false;
				return;
			}
			default -> {
				System.out.println("Ge√ßersiz karakter se√ßimi! Oyun kapatƒ±lƒ±yor...");
				isRunning = false;
				return;
			}
		}

		GameLogger.log("New game started with character: " + player.getCharacterType());
		System.out.println(player.getDescription());
		Thread.sleep(3000);
	}

	private void gameLoop() throws InterruptedException {
		while (isRunning) {
			String choice = GameUI.showMainMenu();
			Location location = null;

			switch (choice) {
				case "1" -> location = new SafeHouse(player);
				case "2" -> location = new ToolStore(player);
				case "3" -> location = new ShadowForest(player);
				case "4" -> location = new DarkCaverns(player);
				case "5" -> location = new VoidRealmPortal(player);
				case "6" -> saveGame();
				case "q" -> {
					System.out.println("\nÔøΩÔøΩ Oyundan √ßƒ±kƒ±≈ü yapƒ±lƒ±yor...");
					isRunning = false;
					return;
				}
				default -> {
					System.out.println("\n‚ùå Ge√ßersiz se√ßim!");
					continue;
				}
			}

			if (location != null) {
				if (!location.getLocation()) {
					System.out.println("\nüíÄ Oyun Bitti!");
					isRunning = false;
					return;
				}
			}
>>>>>>> b4e5e80 (Refactor and reorganize game architecture)
		}
	}

<<<<<<< HEAD
		switch (inputChoiceMenu) {
			case "1" -> {
				SafeHouse safeHouseLocation = new SafeHouse(player, player.getName());
				Thread.sleep(3000);
				System.out.println("G√ºvenli Eve gidiliyor..");
				Thread.sleep(3000);
				safeHouseLocation.getLocation();
			}
			case "2" -> {
				Thread.sleep(3000);
				System.out.println("maƒüazaya gidiliyor..");
				Thread.sleep(3000);
				ToolStore toolStoreLocation = new ToolStore(player, player.getName());
				toolStoreLocation.getLocation();
			}
			case "3" -> {
				Thread.sleep(3000);
				System.out.println("sava≈ü b√∂lgesine gidildi");
			}
			case "q" -> {
				Thread.sleep(3000);
				System.out.println("oyundan √ßƒ±kƒ±≈ü yapƒ±lƒ±yor");
			}
			default -> {
				Thread.sleep(3000);
				System.out.println("Ge√ßersiz giri≈ü yapƒ±ldƒ±. Tekrar deneyin.");
			}
=======
	private void saveGame() {
		try {
			GameSaveManager.saveGame(player);
			System.out.println("\n‚ú® Oyun ba≈üarƒ±yla kaydedildi!");
		} catch (Exception e) {
			System.out.println("\n‚ùå Oyun kaydedilemedi: " + e.getMessage());
			GameLogger.logError("Failed to save game", e);
		}
	}

	private void loadGame() {
		try {
			GameSaveManager.loadGame(player);
			System.out.println("\n‚ú® Oyun ba≈üarƒ±yla y√ºklendi!");
		} catch (Exception e) {
			System.out.println("\n‚ùå Oyun y√ºklenemedi: " + e.getMessage());
			GameLogger.logError("Failed to load game", e);
			isRunning = false;
>>>>>>> b4e5e80 (Refactor and reorganize game architecture)
		}
	}

	@Override
	public void close() {
		if (scanner != null) {
			scanner.close();
		}
		GameLogger.log("Game closed");
	}
}



